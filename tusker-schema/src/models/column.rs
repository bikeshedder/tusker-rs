use serde::Deserialize;

use crate::sql::StatementBuilder;

#[derive(Debug, Deserialize)]
pub struct Column {
    pub name: String,
    pub r#type: String,
    pub notnull: bool,
    pub identity: Identity,
    pub generated: Generated,
    pub default: Option<String>,
}

impl Column {
    pub fn sql(&self) -> String {
        // https://www.postgresql.org/docs/16/sql-createtable.html
        let mut s = StatementBuilder::new();
        s.ident(&self.name);
        s.part(&self.r#type); // FIXME quoting needed for user types/tables?
        match self.generated {
            Generated::No => {}
            Generated::Stored => {
                s.part("GENERATED ALWAYS AS");
                s.part(self.default.as_ref().unwrap());
                s.part("STORED");
            }
        }
        match self.identity {
            Identity::No => {}
            Identity::Default => {
                s.part("GENERATED BY DEFAULT AS IDENTITY");
                if let Some(d) = &self.default {
                    s.part(format!("({})", d));
                }
            }
            Identity::Always => {
                s.part("GENERATED ALWAYS AS IDENTITY");
                if let Some(d) = &self.default {
                    s.part(format!("({})", d));
                }
            }
        }
        if let Some(default) = &self.default {
            s.part("DEFAULT");
            s.part(default);
        }
        if self.notnull {
            s.part("NOT NULL");
        }
        s.to_string()
    }
}

#[derive(Debug, Deserialize)]
pub enum Generated {
    #[serde(rename = "")]
    No,
    #[serde(rename = "s")]
    Stored,
}

#[derive(Debug, Deserialize)]
pub enum Identity {
    #[serde(rename = "")]
    No,
    #[serde(rename = "a")]
    Always,
    #[serde(rename = "d")]
    Default,
}
